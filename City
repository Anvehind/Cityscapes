
#-----Statement of Authorship----------------------------------------#
#
#  This is an individual assessment item.  By submitting this
#  code I agree that it represents my own work.  I am aware of
#  the University rule that a student must not act in a manner
#  which constitutes academic dishonesty as stated and explained
#  in QUT's Manual of Policies and Procedures, Section C/5.3
#  "Academic Integrity" and Section E/2.1 "Student Code of Conduct".
#
#    Student no: n10261371
#    Student name: Anson Tam
#
#  NB: Files submitted without a completed copy of this statement
#  will not be marked.  All files submitted will be subjected to
#  software plagiarism analysis using the MoSS system
#  (http://theory.stanford.edu/~aiken/moss/).
#
#--------------------------------------------------------------------#



#-----Assignment Description-----------------------------------------#
#
#  CITYSCAPES
#
#  This assignment tests your skills at defining functions, processing
#  data stored in lists and efficiently repeating multiple actions in
#  order to display a complex visual image.  The incomplete
#  Python script below is missing a crucial function, "build_city".
#  You are required to complete this function so that when the
#  program is run it draws a city whose plan is determined by
#  randomly-generated data stored in a list which specifies what
#  style of building to erect on particular sites.  See the
#  instruction sheet accompanying this file for full details.
#
#  Note that this assignment is in two parts, the second of which
#  will be released only just before the final deadline.  This
#  template file will be used for both parts and you will submit
#  your final solution as a single Python 3 file, whether or not you
#  complete both parts of the assignment.
#
#--------------------------------------------------------------------#  



#-----Preamble-------------------------------------------------------#
#
# This section imports necessary functions and defines constant
# values used for creating the drawing canvas.  You should not change
# any of the code in this section.
#

# Import the functions needed to complete this assignment.  You
# should not need to use any other modules for your solution.  In
# particular, your solution must not rely on any non-standard Python
# modules that need to be installed separately, because the markers
# may not have access to such modules.

from turtle import *
from math import *

# Define constant values used in the main program that sets up
# the drawing canvas.  Do not change any of these values.

canvas_height = 700 # pixels
canvas_width = 1100 # pixels
grass_depth = 95 # vertical depth of the "grass", in pixels
half_width = canvas_width // 2 # maximum x coordinate in either direction
grid_font = ('Arial', 10, 'normal') # font for drawing the grid
grid_size = 50 # gradations for the x and y scales shown on the screen
offset = 5 # offset of the x-y coordinates from the screen's edge, in pixels
max_height = canvas_height - grass_depth # maximum positive y coordinate
max_building_height = 575 # city ordinance maximum building height
site_width = 240 # maximum width of a building site
floor_height = 50

# Define the locations of building sites approved by the
# city council (arranged from back to front)
sites = [['Site 1', [-225, 0]],
         ['Site 2', [25, 0]],
         ['Site 3', [275, 0]],
         ['Site 4', [-375, -25]],
         ['Site 5', [-125, -25]],
         ['Site 6', [125, -25]],
         ['Site 7', [375, -25]],
         ['Site 8', [-275, -50]],
         ['Site 9', [-25, -50]],
         ['Site 10', [225, -50]]]

#
#--------------------------------------------------------------------#



#-----Functions for Creating the Drawing Canvas----------------------#
#
# The functions in this section are called by the main program to
# manage the drawing canvas for your image.  You should not change
# any of the code in this section.
#

# Set up the canvas and draw the background for the overall image.
# By default the drawing grid is displayed - call the function
# with False as the argument to prevent this.
def create_drawing_canvas(show_grid = True):

    # Set up the drawing canvas with coordinate (0, 0) in the
    # "grass" area
    setup(canvas_width, canvas_height)
    setworldcoordinates(-half_width, -grass_depth, half_width, max_height)

    # Draw as fast as possible
    tracer(False)

    # Make the sky blue
    bgcolor('sky blue')

    # Draw the "grass" as a big green rectangle (overlapping the
    # edge of the drawing canvas slightly)
    overlap = 25 # pixels
    penup()
    goto(-(half_width + overlap), -(grass_depth + overlap)) # bottom-left
    fillcolor('pale green')
    begin_fill()
    setheading(90) # face north
    forward(grass_depth + overlap * 2)
    right(90) # face east
    forward(canvas_width + overlap * 2)
    right(90) # face south
    forward(grass_depth + overlap * 2)
    end_fill()

    # Draw a nice warm sun peeking into the image at the top left
    penup()
    goto(-canvas_width // 2, canvas_height - grass_depth)
    pencolor('yellow')
    dot(350)

    # Draw a big fluffy white cloud in the sky
    goto(canvas_width // 3, canvas_height - grass_depth - 100)
    pencolor('white')
    dot(200)
    setheading(200)
    forward(100)
    dot(180)
    setheading(0)
    forward(200)
    dot(160)

    # Optionally draw x coordinates along the bottom of the
    # screen (to aid debugging and marking)
    pencolor('black')
    if show_grid:
        for x_coord in range(-half_width + grid_size, half_width, grid_size):
            goto(x_coord, -grass_depth + offset)
            write('| ' + str(x_coord), font = grid_font)

    # Optionally draw y coordinates on the left-hand edge of
    # the screen (to aid debugging and marking)
    if show_grid:
        for y_coord in range(-grid_size, max_height, grid_size):
            goto(-half_width + offset, y_coord - offset)
            write(y_coord, font = grid_font)
        goto(-half_width + offset, max_building_height - 5)
        write('Maximum allowed building height', font = grid_font)

    # Optionally mark each of the building sites approved by
    # the city council
    if show_grid:
        for site_name, location in sites:
            goto(location)
            dot(5)
            goto(location[0] - (site_width // 2), location[1])
            setheading(0)
            pendown()
            forward(site_width)
            penup()
            goto(location[0] - 40, location[1] - 17)
            write(site_name + ': ' + str(location), font = grid_font)
     
    # Reset everything ready for the student's solution
    pencolor('black')
    width(1)
    penup()
    home()
    tracer(True)


# End the program and release the drawing canvas.
# By default the cursor (turtle) is hidden when the program
# ends - call the function with False as the argument to
# prevent this.
def release_drawing_canvas(hide_cursor = True):
    tracer(True) # ensure any drawing in progress is displayed
    if hide_cursor:
        hideturtle()
    done()
    
#
#--------------------------------------------------------------------#



#-----Test Data for Use During Code Development----------------------#
#
# The "fixed" data sets in this section are provided to help you
# develop and test your code.  You can use them as the argument to
# the build_city function while perfecting your solution.  However,
# they will NOT be used to assess your program.  Your solution will
# be assessed using the random_plan function appearing below.  Your
# program must work correctly for any data set generated by the
# random_plan function.
#
# Each of the data sets below is a list specifying a set of
# buildings to be erected.  Each specification consists of the
# following parts:
#
# a) The site on which to erect the building, from Site 1 to 10.
# b) The style of building to be erected, from style 'A' to 'D'.
# c) The number of floors to be constructed, from 1 to 10.
# d) An extra value, either 'X' or 'O', whose purpose will be
#    revealed only in Part B of the assignment.  You should
#    ignore it while completing Part A.
#

# Each of these data sets draws just one building in each of the
# four styles
fixed_plan_1 = [[1, 'A', 6, 'O']]
fixed_plan_2 = [[2, 'B', 7, 'O']]
fixed_plan_3 = [[3, 'C', 5, 'O']]
fixed_plan_4 = [[4, 'D', 4, 'O']]
fixed_plan_5 = [[1, 'A', 9, 'X']]
fixed_plan_6 = [[2, 'B', 2, 'X']]
fixed_plan_7 = [[3, 'C', 3, 'X']]
fixed_plan_8 = [[4, 'D', 6, 'X']]

# Each of the following data sets draws just one style of
# building but at three different sizes, including the maximum
# (so that you can check your building's maximum height against
# the height limit imposed by the city council)
fixed_plan_9 = [[1, 'A', 10, 'O'], [2, 'A', 5, 'O'], [3, 'A', 1, 'O']]
fixed_plan_10 = [[1, 'B', 10, 'O'], [2, 'B', 5, 'O'], [3, 'B', 1, 'O']]
fixed_plan_11 = [[1, 'C', 10, 'O'], [2, 'C', 5, 'O'], [3, 'C', 1, 'O']]
fixed_plan_12 = [[1, 'D', 10, 'O'], [2, 'D', 5, 'O'], [3, 'D', 1, 'O']]
fixed_plan_13 = [[1, 'A', 10, 'X'], [2, 'A', 5, 'X'], [3, 'A', 1, 'X']]
fixed_plan_14 = [[1, 'B', 10, 'X'], [2, 'B', 5, 'X'], [3, 'B', 1, 'X']]
fixed_plan_15 = [[1, 'C', 10, 'X'], [2, 'C', 5, 'X'], [3, 'C', 1, 'X']]
fixed_plan_16 = [[1, 'D', 10, 'X'], [2, 'D', 5, 'X'], [3, 'D', 1, 'X']]

# Each of the following data sets draws a complete cityscape
# involving each style of building at least once. There is
# no pattern to them, they are simply specific examples of the
# kind of data returned by the random_plan function which will be
# used to assess your solution. Your program must work for any value
# that can be returned by the random_plan function, not just these
# fixed data sets.
fixed_plan_17 = \
         [[1, 'D', 2, 'X'],
          [2, 'B', 7, 'X'],
          [5, 'C', 6, 'X'],
          [6, 'A', 4, 'X']]
fixed_plan_18 = \
         [[1, 'D', 6, 'O'],
          [3, 'C', 5, 'O'],
          [4, 'B', 3, 'O'],
          [9, 'A', 9, 'O'],
          [10, 'D', 2, 'O']]
fixed_plan_19 = \
         [[5, 'C', 6, 'O'],
          [6, 'B', 9, 'O'],
          [7, 'A', 5, 'O'],
          [8, 'A', 7, 'O'],
          [9, 'D', 4, 'O']]
fixed_plan_20 = \
         [[1, 'A', 4, 'O'],
          [2, 'B', 4, 'O'],
          [3, 'A', 5, 'O'],
          [4, 'D', 7, 'O'],
          [10, 'B', 10, 'O']]
fixed_plan_21 = \
         [[1, 'B', 6, 'O'],
          [3, 'A', 4, 'O'],
          [4, 'C', 4, 'O'],
          [6, 'A', 8, 'O'],
          [8, 'C', 7, 'O'],
          [9, 'B', 5, 'O'],
          [10, 'D', 3, 'O']]
fixed_plan_22 = \
         [[1, 'A', 10, 'O'],
          [2, 'A', 9, 'O'],
          [3, 'C', 10, 'O'],
          [4, 'B', 5, 'O'],
          [5, 'B', 7, 'O'],
          [6, 'B', 9, 'O'],
          [7, 'C', 2, 'O'],
          [8, 'C', 4, 'O'],
          [9, 'A', 6, 'O'],
          [10, 'D', 7, 'O']]
fixed_plan_23 = \
         [[3, 'A', 8, 'O'],
          [4, 'C', 8, 'O'],
          [5, 'B', 4, 'O'],
          [6, 'D', 5, 'O'],
          [7, 'C', 5, 'X'],
          [8, 'A', 3, 'X'],
          [9, 'D', 2, 'X']]
fixed_plan_24 = \
         [[2, 'C', 3, 'O'],
          [3, 'B', 1, 'O'],
          [4, 'C', 3, 'X'],
          [5, 'C', 1, 'O'],
          [6, 'D', 2, 'O'],
          [7, 'B', 1, 'O'],
          [8, 'D', 2, 'O'],
          [9, 'C', 7, 'O'],
          [10, 'A', 1, 'X']]
fixed_plan_25 = \
         [[1, 'B', 7, 'X'],
          [3, 'C', 1, 'O'],
          [6, 'D', 3, 'O'],
          [7, 'A', 7, 'O'],
          [8, 'D', 3, 'X'],
          [9, 'C', 7, 'O'],
          [10, 'C', 9, 'X']]
fixed_plan_26 = \
         [[1, 'A', 6, 'O'],
          [2, 'A', 2, 'O'],
          [3, 'A', 9, 'X'],
          [4, 'D', 1, 'X'],
          [5, 'C', 7, 'O'],
          [6, 'D', 6, 'O'],
          [7, 'B', 5, 'O'],
          [8, 'A', 1, 'O'],
          [9, 'D', 10, 'X'],
          [10, 'A', 6, 'O']]
 
#
#--------------------------------------------------------------------#



#-----Function for Assessing Your Solution---------------------------#
#
# The function in this section will be used to mark your solution.
# Do not change any of the code in this section.
#
# The following function creates a random data set specifying a city
# to be built.  Your program must work for any data set returned by
# this function.  The results returned by calling this function will
# be used as the argument to your build_city function during marking.
# For convenience during code development and marking this function
# also prints the plan for the city to be built to the shell window.
#

def random_plan(print_plan = True):
    building_probability = 70 # percent
    option_probability = 20 # percent
    from random import randint, choice
    # Create a random list of building instructions
    city_plan = []
    for site in range(1, len(sites) + 1): # consider each building site
        if randint(1, 100) <= building_probability: # decide whether to build here
            style = choice(['A', 'B', 'C', 'D']) # choose building style
            num_floors = randint(1, 10) # choose number of floors
            if randint(1, 100) <= option_probability: # decide on option's value
                option = 'X'
            else:
                option = 'O'
            city_plan.append([site, style, num_floors, option])
    # Optionally print the result to the shell window
    if print_plan:
        print('\nBuildings to be constructed\n' +
              '(site, style, no. floors, option):\n\n',
              str(city_plan).replace('],', '],\n '))
    # Return the result to the student's build_city function
    return city_plan

#
#--------------------------------------------------------------------#



#-----Student's Solution---------------------------------------------#
#
#  Complete the assignment by replacing the dummy function below with
#  your own "build_city" function.
#

# Erect buildings as per the provided city plan

# Erect buildings as per the provided city plan



def build_city(random_plan):
    index=0
    while(len(random_plan)>index):
        plan = random_plan[index]
        if(len(plan)>0):
            site = plan[0]
            style = plan[1]
            floors = plan[2]
            construction = plan[3]
            for slot in range(0,len(sites)):
                if (site == int(sites[slot][0].split(" ")[1])):
                    location = sites[slot][1]
                    if(style == 'A'):
                            library(location,floors,construction)
                    elif(style=='B'):
                            bank(location,floors,construction)
                    elif(style=='C'):
                            apartment(location,floors,construction)
                    elif(style=='D'):
                            hotel(location,floors,construction)
                    
                    index+=1                   
        
#library building
def library(loc,floors,construction):
   pencolor("black")
   pensize(1)
   fillcolor("maroon")
   goto(loc[0]-(site_width//2),loc[1])
   begin_fill()
   pendown()
   setheading(90)
   forward(floor_height)
   right(90)
   forward(site_width)
   right(90)
   forward(floor_height)
   right(90)
   forward(site_width)
   penup()
   end_fill()
   fillcolor("goldenrod")
   goto(loc[0]-(site_width//2),loc[1]+floor_height)
   begin_fill()
   pendown()
   setheading(90)
   forward(10)
   right(90)
   forward(site_width)
   right(90)
   forward(10)
   right(90)
   forward(site_width)
   penup()
   end_fill()
   fillcolor("goldenrod")
   goto(loc[0]-(site_width//4)-20,loc[1])
   pendown()
   setheading(90)
   forward(floor_height)
   penup()
   goto(loc[0]+(site_width//4)+20,loc[1])
   pendown()
   setheading(90)
   forward(floor_height)
   penup()
   goto(loc[0]-(site_width//4)-25,loc[1]+floor_height)
   pendown()
   setheading(90)
   forward(10)
   penup()
   goto(loc[0]+(site_width//4)+25,loc[1]+floor_height)
   pendown()
   setheading(90)
   forward(10)
   penup()
   goto(loc[0]-(site_width//8),loc[1])
   begin_fill()
   pendown()
   setheading(90)
   forward(floor_height+10)
   right(90)
   forward(site_width//4)
   right(90)
   forward(floor_height+10)
   right(90)
   forward(site_width//4)
   penup()
   end_fill()
   for steps in range(0,4):
       goto(loc[0]-50+(5*steps),loc[1]+(5*steps))
       begin_fill()
       pendown()
       setheading(90)
       forward(5)
       right(90)
       forward(100-(10*steps))
       right(90)
       forward(5)
       right(90)
       forward(100-(10*steps))
       penup()
       end_fill()
   height = 20
   while(height<=floor_height):
       goto(loc[0]-30,loc[1]+height)
       pendown()
       setheading(90)
       forward(5)
       right(90)
       forward(60)
       right(90)
       forward(5)
       right(90)
       forward(60)
       penup()
       height+=5;
       fillcolor("lightsalmon")
   for current_floor in range(0,floors):
       goto(loc[0]-(site_width//2),loc[1]+(floor_height*(current_floor+1))+10)
       begin_fill()
       pendown()
       setheading(90)
       forward(floor_height)
       penup()
       right(90)
       forward(site_width)
       pendown()
       right(90)
       forward(floor_height)
       penup()
       right(90)
       forward(site_width)
       penup()
       end_fill()
   for current_floor in range(0,floors):
       pencolor("black")
       fillcolor("firebrick")
       goto(loc[0]-20,loc[1]+((floor_height)*(current_floor+1))+15)
       begin_fill()
       pendown()
       setheading(90)
       forward(35)
       right(90)
       forward(40)
       right(90)
       forward(35)
       right(90)
       forward(40)
       penup()
       end_fill()
       #window pane
       fillcolor("gainsboro")
       goto(loc[0]-18,loc[1]+((floor_height)*(current_floor+1))+17)
       begin_fill()
       pendown()
       setheading(90)
       forward(31)
       right(90)
       forward(36)
       right(90)
       forward(31)
       right(90)
       forward(36)
       penup()
       end_fill()
       pencolor("firebrick")
       pensize(2)
       width = 9;
       while(True):
           goto(loc[0]-18+width,loc[1]+((floor_height)*(current_floor+1))+18)
           pendown()
           setheading(90)
           forward(29)
           penup()
           width+=9
           if(width>=36):
               pencolor("black")
               pensize(1)
               break
       pensize(2)
       pencolor("firebrick")
       height = 8;
       while(True):
           goto(loc[0]-18,loc[1]+((floor_height)*(current_floor+1))+17+height)
           pendown()
           setheading(0)
           forward(35)
           penup()
           height+=8
           if(height>=31):
               pencolor("black")
               pensize(1)
               break
   for current_floor in range(0,floors):
        for windows in range(0,2):
            fillcolor("firebrick")
            goto(loc[0]-(site_width//2)+10+(30*(windows)),loc[1]+((floor_height)*(current_floor+1))+15)
            begin_fill()
            pendown()
            setheading(90)
            forward(35)
            right(90)
            forward(20)
            right(90)
            forward(35)
            right(90)
            forward(20)
            penup()
            end_fill()
            goto(loc[0]+(site_width//2)-30-(30*(windows)),loc[1]+((floor_height)*(current_floor+1))+15)
            begin_fill()
            pendown()
            setheading(90)
            forward(35)
            right(90)
            forward(20)
            right(90)
            forward(35)
            right(90)
            forward(20)
            penup()
            end_fill()
            #window pane
            fillcolor("gainsboro")
            pencolor("firebrick")
            goto(loc[0]-(site_width//2)+12+(30*(windows)),loc[1]+(floor_height*(current_floor+1))+17)
            begin_fill()
            pendown()
            setheading(90)
            forward(30)
            right(90)
            forward(16)
            right(90)
            forward(30)
            right(90)
            forward(16)
            penup()
            end_fill()
            goto(loc[0]+(site_width//2)-28-(30*(windows)),loc[1]+((floor_height)*(current_floor+1))+17)
            begin_fill()
            pendown()
            setheading(90)
            forward(30)
            right(90)
            forward(16)
            right(90)
            forward(30)
            right(90)
            forward(16)
            penup()
            end_fill()
            pencolor("firebrick")
            pensize(2)
            goto(loc[0]-(site_width//2)+20+(30*(windows)),loc[1]+(floor_height*(current_floor+1))+17)
            pendown()
            setheading(90)
            forward(30)
            penup()
            goto(loc[0]+(site_width//2)-20-(30*(windows)),loc[1]+(floor_height*(current_floor+1))+17)
            pendown()
            setheading(90)
            forward(30)
            penup()
            for pane in range(1,3):
                goto(loc[0]-(site_width//2)+12+(30*(windows)),loc[1]+(floor_height*(current_floor+1))+17+(10*pane))
                pendown()
                setheading(0)
                forward(15)
                penup()
                goto(loc[0]+(site_width//2)-28-(30*(windows)),loc[1]+((floor_height)*(current_floor+1))+17+(10*pane))
                pendown()
                setheading(0)
                forward(15)
                penup()
            pencolor("black")
            pensize(1)
            goto(loc[0]-(site_width//2)+12+(30*(windows)),loc[1]+(floor_height*(current_floor+1))+17)
            pendown()
            setheading(90)
            forward(30)
            right(90)
            forward(16)
            right(90)
            forward(30)
            right(90)
            forward(16)
            penup()
            goto(loc[0]+(site_width//2)-28-(30*(windows)),loc[1]+((floor_height)*(current_floor+1))+17)
            pendown()
            setheading(90)
            forward(30)
            right(90)
            forward(16)
            right(90)
            forward(30)
            right(90)
            forward(16)
            penup()
            pencolor("black")
            pensize(1)
   fillcolor("khaki")
   width = 0
   for pillar in range(1,3):
        if(pillar == 1):
            width = 70*pillar
        elif(pillar==2):
            width = 75*pillar
        goto(loc[0]-(site_width//2)+width,loc[1]+floor_height+10)
        pendown()
        begin_fill()
        setheading(90)
        forward(floor_height*(floors))
        right(90)
        forward(20)
        right(90)
        forward(floor_height*(floors))
        end_fill()
        penup()
        goto(loc[0]-(site_width//2)+19+width,loc[1]+floor_height+10)
        pendown()
        begin_fill()
        left(450)
        circle(6,180)
        end_fill()
        penup()
        goto(loc[0]-(site_width//2)+1+width,loc[1]+floor_height+22)
        pendown()
        begin_fill()
        right(0)
        circle(6,180)
        end_fill()
        penup()
        goto(loc[0]-(site_width//2)+width+1,loc[1]+10+(floor_height*(floors+1)))
        pendown()
        begin_fill()
        right(180)
        circle(6,180)
        end_fill()
        penup()
        goto(loc[0]-(site_width//2)+width+19,loc[1]+(floor_height*(floors))+48)
        pendown()
        begin_fill()
        right(0)
        circle(6,180)
        end_fill()
        penup()
   if construction == 'O':  
       fillcolor("firebrick")
       goto(loc[0]-20,loc[1]+10+floor_height)
       begin_fill()
       pendown()
       setheading(90)
       forward(40)
       right(90)
       forward(40)
       right(90)
       forward(40)
       right(90)
       forward(40)
       penup()
       end_fill()
       fillcolor("gainsboro")
       goto(loc[0]-17,loc[1]+10+floor_height+3)
       begin_fill()
       pendown()
       setheading(90)
       forward(34)
       right(90)
       forward(14)
       right(90)
       forward(34)
       right(90)
       forward(14)
       penup()
       end_fill()
       goto(loc[0]+3,loc[1]+10+floor_height+3)
       begin_fill()
       pendown()
       setheading(90)
       forward(34)
       right(90)
       forward(14)
       right(90)
       forward(34)
       right(90)
       forward(14)
       penup()
       end_fill()
       goto(loc[0],loc[1]+10+floor_height)
       pendown()
       setheading(90)
       forward(40)
       penup()
       pensize(1)
       pencolor("black")
       fillcolor("firebrick")
       goto(loc[0]-(site_width//2)-5,loc[1]+35+(floor_height*(floors+1)))
       begin_fill()
       pendown()
       setheading(55)
       forward(60)
       right(55)
       forward(site_width-59)
       right(55)
       forward(60)
       penup()
       end_fill()
       fillcolor("firebrick")
       goto(loc[0]-(site_width//2)-5,loc[1]+10+(floor_height*(floors+1)))
       begin_fill()
       pendown()
       setheading(90)
       forward(floor_height//2)
       right(90)
       forward(site_width+10)
       right(90)
       forward(floor_height//2)
       right(90)
       forward(site_width+10)
       penup()
       end_fill()
       fillcolor("navajowhite")
       pencolor("firebrick")
       pensize(5)
       goto(loc[0]-70,loc[1]+35+(floor_height*(floors+1)))
       begin_fill()
       pendown()
       setheading(55)
       forward(120)
       right(109)
       forward(121)
       penup()
       end_fill()
       pensize(1)
       goto(loc[0]-30,loc[1]+52+(floor_height*(floors+1)))
       pencolor('black')
       write("L I B R A R Y",grid_font)
       penup()
   if construction == 'X':
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors)+60)
        pendown()
        setheading(90)
        pensize(3)
        forward(40)
        right(90)
        forward(40)
        right(90)
        forward(40)
        penup()
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors)+60)
        setheading(0)
        pendown()
        forward(40)
        penup()
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors)+40+60)
        setheading(315)
        pendown()
        forward(57)
        penup()
        goto(loc[0]-(site_width//4)-2+40,loc[1]+(floor_height*floors)+40+60)
        setheading(225)
        pendown()
        forward(57)
        penup()
        goto(loc[0]-(site_width//4)-2+20,loc[1]+(floor_height*floors)+40+60)
        pendown()
        setheading(90)
        forward(20)
        penup()
        setheading(180)
        forward(20)
        pendown()
        setheading(90)
        forward(30)
        setheading(337)
        forward(76.15)
        setheading(180)
        forward(70)
        penup()
        setheading(0)
        forward(70)
        pendown()
        setheading(270)
        forward(20)
        dot(8)
        penup()
        setheading(270)
        forward(15)
        setheading(0)
        pendown()
        circle(7.5,180)
        penup()
        #Danger sign
        goto(loc[0]-(site_width//4)-2+20,loc[1]+(floor_height*floors)+60)
        pensize(1)
        pendown()
        setheading(270)
        forward(10)
        pensize(2)
        fillcolor('orange')
        begin_fill()
        setheading(225)
        forward(30)
        setheading(315)
        forward(30)
        setheading(45)
        forward(30)
        setheading(135)
        forward(30)
        end_fill()
        penup()
        goto(loc[0]-(site_width//4)+1,loc[1]+(floor_height*floors)-38+60)
        write("DANGER!", font=("Arial",6, "normal"))
        #poor_guy
        goto(loc[0]-(site_width//4)-2+110,loc[1]+(floor_height*floors)+30+60)
        dot(12)
        setheading(90)
        forward(3)
        setheading(180)
        forward(6)
        pencolor('yellow')
        fillcolor('yellow')
        begin_fill()
        pendown()
        setheading(0)
        forward(14)
        setheading(90)
        circle(7,180)
        end_fill()
        penup()
        pencolor('black')
        goto(loc[0]-(site_width//4)-2+110,loc[1]+(floor_height*floors)+30+60)
        pendown()
        setheading(270)
        forward(5)
        setheading(225)
        forward(15)
        backward(15)
        setheading(315)
        forward(15)
        backward(15)
        setheading(270)
        forward(15)
        setheading(225)
        forward(15)
        backward(15)
        setheading(315)
        forward(15)
        penup()
        pensize(1)
   

#hotel
def hotel(loc,floors,construction):
    pencolor('black')
    fillcolor("olive")
    for current_floor in range(0,floors):
        goto(loc[0]-(site_width//2)+(5*current_floor),loc[1]+(floor_height*current_floor))
        begin_fill()
        pendown()
        setheading(90)
        forward(floor_height)
        right(90)
        forward(site_width-(10*current_floor))
        right(90)
        forward(floor_height)
        right(90)
        forward(site_width-(10*current_floor))
        penup()
        end_fill()

    fillcolor("goldenrod")
    goto(loc[0]-20,loc[1])
    begin_fill()
    pendown()
    setheading(90)
    forward(40)
    right(90)
    forward(40)
    right(90)
    forward(40)
    right(90)
    forward(40)
    penup()
    end_fill()
    fillcolor("paleturquoise")
    goto(loc[0]-20,loc[1]+15)
    begin_fill()
    pendown()
    setheading(90)
    forward(25)
    right(90)
    forward(40)
    right(90)
    forward(25)
    right(90)
    forward(40)
    penup()
    end_fill()
    goto(loc[0],loc[1])
    pendown()
    setheading(90)
    forward(40)
    penup()
    for win in range(0,2):
        if(win==0):
            goto(loc[0]-90,loc[1]+17)
        elif(win==1):
            goto(loc[0]+50,loc[1]+17)
        begin_fill()
        pendown()
        setheading(90)
        forward(20)
        right(90)
        forward(40)
        right(90)
        forward(20)
        right(90)
        forward(40)
        penup()
        end_fill()
    for current_floor in range(1,floors):
        for window in range(1,6):
            goto(loc[0]-(site_width//2)+20+(30*window),loc[1]+(floor_height*current_floor)+10)
            begin_fill()
            pendown()
            setheading(90)
            forward(30)
            right(90)
            forward(15)
            right(90)
            forward(30)
            right(90)
            forward(15)
            penup()
            end_fill()
            goto(loc[0]-(site_width//2)+20+(30*window),loc[1]+(floor_height*current_floor)+25)
            pendown()
            setheading(0)
            forward(15)
            penup()
    if construction == 'O':
        fillcolor("dimgrey")
        goto(loc[0]-(site_width//2)+(2*floors),loc[1]+(floor_height*floors))
        begin_fill()
        pendown()
        setheading(90)
        forward(20)
        right(90)
        forward(site_width-(4*floors))
        right(90)
        forward(20)
        right(90)
        forward(site_width-(4*floors))
        penup()
        end_fill()
        fillcolor("gold")
        goto(loc[0]-50,loc[1]+(floor_height*floors)+10)
        begin_fill()
        pendown()
        setheading(90)
        forward(20)
        right(90)
        forward(100)
        right(90)
        forward(20)
        right(90)
        forward(100)
        penup()
        end_fill()
        pencolor("black")
        goto(loc[0]-20,loc[1]+(floor_height*floors)+12)
        write("H O T E L",grid_font)
    if construction == 'X':
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors))
        pendown()
        setheading(90)
        pensize(3)
        forward(40)
        right(90)
        forward(40)
        right(90)
        forward(40)
        penup()
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors))
        setheading(0)
        pendown()
        forward(40)
        penup()
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors)+40)
        setheading(315)
        pendown()
        forward(57)
        penup()
        goto(loc[0]-(site_width//4)-2+40,loc[1]+(floor_height*floors)+40)
        setheading(225)
        pendown()
        forward(57)
        penup()
        goto(loc[0]-(site_width//4)-2+20,loc[1]+(floor_height*floors)+40)
        pendown()
        setheading(90)
        forward(20)
        penup()
        setheading(180)
        forward(20)
        pendown()
        setheading(90)
        forward(30)
        setheading(337)
        forward(76.15)
        setheading(180)
        forward(70)
        penup()
        setheading(0)
        forward(70)
        pendown()
        setheading(270)
        forward(20)
        dot(8)
        penup()
        setheading(270)
        forward(15)
        setheading(0)
        pendown()
        circle(7.5,180)
        penup()
        #Danger sign
        goto(loc[0]-(site_width//4)-2+20,loc[1]+(floor_height*floors))
        pensize(1)
        pendown()
        setheading(270)
        forward(10)
        pensize(2)
        fillcolor('orange')
        begin_fill()
        setheading(225)
        forward(30)
        setheading(315)
        forward(30)
        setheading(45)
        forward(30)
        setheading(135)
        forward(30)
        end_fill()
        penup()
        goto(loc[0]-(site_width//4)+1,loc[1]+(floor_height*floors)-38)
        write("DANGER!", font=("Arial",6, "normal"))
        #poor_guy
        goto(loc[0]-(site_width//4)-2+110,loc[1]+(floor_height*floors)+30)
        dot(12)
        setheading(90)
        forward(3)
        setheading(180)
        forward(6)
        pencolor('yellow')
        fillcolor('yellow')
        begin_fill()
        pendown()
        setheading(0)
        forward(14)
        setheading(90)
        circle(7,180)
        end_fill()
        penup()
        pencolor('black')
        goto(loc[0]-(site_width//4)-2+110,loc[1]+(floor_height*floors)+30)
        pendown()
        setheading(270)
        forward(5)
        setheading(225)
        forward(15)
        backward(15)
        setheading(315)
        forward(15)
        backward(15)
        setheading(270)
        forward(15)
        setheading(225)
        forward(15)
        backward(15)
        setheading(315)
        forward(15)
        penup()
        pensize(1)

    
def apartment(loc,floors,construction):
    fillcolor("orange")
    for current_floor in range(0,floors):
        goto(loc[0]-(site_width//2),loc[1]+(floor_height*current_floor))
        begin_fill()
        pendown()
        setheading(90)
        forward(floor_height)
        right(90)
        forward(site_width)
        right(90)
        forward(floor_height)
        right(90)
        forward(site_width)
        penup()
        end_fill()
    fillcolor("pink")
    for current_floor in range(1,floors):
        goto(loc[0]-(site_width//2)-2,loc[1]+(floor_height*current_floor)-4)
        begin_fill()
        pendown()
        setheading(90)
        forward(20)
        right(90)
        forward(site_width+4)
        right(90)
        forward(20)
        right(90)
        forward(site_width+4)
        penup()
        end_fill()
    fillcolor("paleturquoise")
    pencolor("darkorange")
    goto(loc[0]-40,loc[1])
    begin_fill()
    pendown()
    setheading(90)
    forward(40)
    right(90)
    forward(80)
    right(90)
    forward(40)
    penup()
    end_fill()
    for steps in range(0,2):
        if(steps ==0):
            goto(loc[0]-110,loc[1]+5)
        elif(steps==1):
            goto(loc[0]+50,loc[1]+5)
        begin_fill()
        pendown()
        setheading(90)
        forward(35)
        right(90)
        forward(60)
        right(90)
        forward(35)
        right(90)
        forward(60)
        penup()
        end_fill()
    for current_floor in range(1,floors):
        for steps in range(0,2):
            if(steps==0):
                goto(loc[0]-(site_width//2)+10,loc[1]+(floor_height*current_floor)+16)
            elif(steps ==1):
                goto(loc[0]+10,loc[1]+(floor_height*current_floor)+16)  
            begin_fill()
            pendown()
            setheading(90)
            forward(25)
            right(90)
            forward(100)
            right(90)
            forward(25)
            penup()
            right(90)
            forward(100)
            end_fill()
    for current_floor in range(1,floors):
        for steps in range(0,2):
            if(steps==0):
                goto(loc[0]-(site_width//2)+60,loc[1]+(floor_height*current_floor)+16)
            elif(steps ==1):
                goto(loc[0]+60,loc[1]+(floor_height*current_floor)+16) 
            pendown()
            setheading(90)
            forward(25)
            penup()
    if construction == 'O':
        goto(loc[0],loc[1])
        pendown()
        setheading(90)
        forward(40)
        penup()
        fillcolor("brown")
        pencolor("black")
        goto(loc[0]-(site_width//2),loc[1]+(floor_height*floors))
        begin_fill()
        pendown()
        setheading(55)
        forward(50)
        right(55)
        forward(180)
        right(52)
        forward(51)
        penup()
        end_fill()
        pencolor("darkorange")
        goto(loc[0]-50,loc[1]+(floor_height*floors)+15)
        write("A P A R T M E N T S",grid_font)
        penup()
    if construction == 'X':
        pencolor('black')
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors))
        pendown()
        setheading(90)
        pensize(3)
        forward(40)
        right(90)
        forward(40)
        right(90)
        forward(40)
        penup()
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors))
        setheading(0)
        pendown()
        forward(40)
        penup()
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors)+40)
        setheading(315)
        pendown()
        forward(57)
        penup()
        goto(loc[0]-(site_width//4)-2+40,loc[1]+(floor_height*floors)+40)
        setheading(225)
        pendown()
        forward(57)
        penup()
        goto(loc[0]-(site_width//4)-2+20,loc[1]+(floor_height*floors)+40)
        pendown()
        setheading(90)
        forward(20)
        penup()
        setheading(180)
        forward(20)
        pendown()
        setheading(90)
        forward(30)
        setheading(337)
        forward(76.15)
        setheading(180)
        forward(70)
        penup()
        setheading(0)
        forward(70)
        pendown()
        setheading(270)
        forward(20)
        dot(8)
        penup()
        setheading(270)
        forward(15)
        setheading(0)
        pendown()
        circle(7.5,180)
        penup()
        #Danger sign
        goto(loc[0]-(site_width//4)-2+20,loc[1]+(floor_height*floors))
        pensize(1)
        pendown()
        setheading(270)
        forward(10)
        pensize(2)
        fillcolor('orange')
        begin_fill()
        setheading(225)
        forward(30)
        setheading(315)
        forward(30)
        setheading(45)
        forward(30)
        setheading(135)
        forward(30)
        end_fill()
        penup()
        goto(loc[0]-(site_width//4)+1,loc[1]+(floor_height*floors)-38)
        write("DANGER!", font=("Arial",6, "normal"))
        #poor_guy
        goto(loc[0]-(site_width//4)-2+110,loc[1]+(floor_height*floors)+30)
        dot(12)
        setheading(90)
        forward(3)
        setheading(180)
        forward(6)
        pencolor('yellow')
        fillcolor('yellow')
        begin_fill()
        pendown()
        setheading(0)
        forward(14)
        setheading(90)
        circle(7,180)
        end_fill()
        penup()
        pencolor('black')
        goto(loc[0]-(site_width//4)-2+110,loc[1]+(floor_height*floors)+30)
        pendown()
        setheading(270)
        forward(5)
        setheading(225)
        forward(15)
        backward(15)
        setheading(315)
        forward(15)
        backward(15)
        setheading(270)
        forward(15)
        setheading(225)
        forward(15)
        backward(15)
        setheading(315)
        forward(15)
        penup()
        pensize(1)
#bank  
def bank(loc,floors,construction):
    pencolor("black")
    fillcolor("slategrey")
    for current_floor in range(0,floors):
        goto(loc[0]-(site_width//2),loc[1]+(floor_height*current_floor))
        begin_fill()
        pendown()
        setheading(90)
        forward(floor_height)
        right(90)
        forward(site_width)
        right(90)
        forward(floor_height)
        right(90)
        forward(site_width)
        penup()
        end_fill()
    fillcolor("saddlebrown")
    goto(loc[0]-10,loc[1])
    begin_fill()
    pendown()
    setheading(90)
    forward(45)
    right(90)
    forward(25)
    right(90)
    forward(45)
    right(90)
    forward(25)
    penup()
    end_fill()
    fillcolor("paleturquoise")
    goto(loc[0]-7,loc[1])
    begin_fill()
    pendown()
    setheading(90)
    forward(42)
    right(90)
    forward(19)
    right(90)
    forward(39)
    right(90)
    forward(19)
    penup()
    end_fill()
    for window in range(0,4):
        if(window ==0):
            goto(loc[0]-100,loc[1]+15)
        elif(window ==1):
            goto(loc[0]+80,loc[1]+15)
        elif(window ==2):
            goto(loc[0]-50,loc[1]+15)
        elif(window ==3):
            goto(loc[0]+40,loc[1]+15)
        begin_fill()
        pendown()
        setheading(90)
        forward(25)
        right(90)
        forward(20)
        right(90)
        forward(25)
        right(90)
        forward(20)
        penup()
        end_fill()
    for current_floor in range(1,floors):
        for windows in range(1,5):
            if(windows == 1):
                goto(loc[0]-(site_width//2),loc[1]+(floor_height*current_floor)+(15))
            elif(windows==2):
                goto(loc[0]-(site_width//2),loc[1]+(floor_height*current_floor)+(30))
            elif(windows==3):
                goto(loc[0]+(site_width//2)-55,loc[1]+(floor_height*current_floor)+(15))
            elif(windows==4):
                goto(loc[0]+(site_width//2)-55,loc[1]+(floor_height*current_floor)+(30))
            begin_fill()
            pendown()
            setheading(90)
            forward(10)
            right(90)
            forward(55)
            right(90)
            forward(10)
            right(90)
            forward(55)
            penup()
            end_fill()
    pensize(1)
    for current_floor in range(1,floors):
        goto(loc[0],loc[1]+(current_floor*floor_height)+5)
        begin_fill()
        pendown()
        setheading(135)
        forward(30)
        right(90)
        forward(30)
        right(90)
        forward(30)
        right(90)
        forward(30)
        penup()
        end_fill()
    if construction == 'O':
        fillcolor("orangered")
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors))
        begin_fill()
        pendown()
        setheading(90)
        forward(20)
        right(90)
        forward(site_width//2+4)
        right(90)
        forward(20)
        right(90)
        forward(site_width//2+4)
        penup()
        end_fill()
        pencolor("beige")
        goto(loc[0]-15,loc[1]+(floor_height*floors))
        write("B A N K",grid_font)
        penup()
        pencolor('black')
    if construction == 'X':
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors))
        pendown()
        setheading(90)
        pensize(3)
        forward(40)
        right(90)
        forward(40)
        right(90)
        forward(40)
        penup()
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors))
        setheading(0)
        pendown()
        forward(40)
        penup()
        goto(loc[0]-(site_width//4)-2,loc[1]+(floor_height*floors)+40)
        setheading(315)
        pendown()
        forward(57)
        penup()
        goto(loc[0]-(site_width//4)-2+40,loc[1]+(floor_height*floors)+40)
        setheading(225)
        pendown()
        forward(57)
        penup()
        goto(loc[0]-(site_width//4)-2+20,loc[1]+(floor_height*floors)+40)
        pendown()
        setheading(90)
        forward(20)
        penup()
        setheading(180)
        forward(20)
        pendown()
        setheading(90)
        forward(30)
        setheading(337)
        forward(76.15)
        setheading(180)
        forward(70)
        penup()
        setheading(0)
        forward(70)
        pendown()
        setheading(270)
        forward(20)
        dot(8)
        penup()
        setheading(270)
        forward(15)
        setheading(0)
        pendown()
        circle(7.5,180)
        penup()
        #Danger sign
        goto(loc[0]-(site_width//4)-2+20,loc[1]+(floor_height*floors))
        pensize(1)
        pendown()
        setheading(270)
        forward(10)
        pensize(2)
        fillcolor('orange')
        begin_fill()
        setheading(225)
        forward(30)
        setheading(315)
        forward(30)
        setheading(45)
        forward(30)
        setheading(135)
        forward(30)
        end_fill()
        penup()
        goto(loc[0]-(site_width//4)+1,loc[1]+(floor_height*floors)-38)
        write("DANGER!", font=("Arial",6, "normal"))
        #poor_guy
        goto(loc[0]-(site_width//4)-2+110,loc[1]+(floor_height*floors)+30)
        dot(12)
        setheading(90)
        forward(3)
        setheading(180)
        forward(6)
        pencolor('yellow')
        fillcolor('yellow')
        begin_fill()
        pendown()
        setheading(0)
        forward(14)
        setheading(90)
        circle(7,180)
        end_fill()
        penup()
        pencolor('black')
        goto(loc[0]-(site_width//4)-2+110,loc[1]+(floor_height*floors)+30)
        pendown()
        setheading(270)
        forward(5)
        setheading(225)
        forward(15)
        backward(15)
        setheading(315)
        forward(15)
        backward(15)
        setheading(270)
        forward(15)
        setheading(225)
        forward(15)
        backward(15)
        setheading(315)
        forward(15)
        penup()
        pensize(1)


#
#--------------------------------------------------------------------#



#-----Main Program---------------------------------------------------#
#
# This main program sets up the background, ready for you to start
# building your city.  Do not change any of this code except
# as indicated by the comments marked '*****'.
#

# Set up the drawing canvas
# ***** Change the default argument to False if you don't want to
# ***** display the coordinates and building sites
create_drawing_canvas()

# Control the drawing speed
# ***** Modify the following argument if you want to adjust
# ***** the drawing speed
speed('fastest')

# Decide whether or not to show the drawing being done step-by-step
# ***** Set the following argument to False if you don't want to wait
# ***** while the cursor moves around the screen
tracer(False)

# Give the drawing canvas a title
# ***** Replace this title with your name and/or a description of
# ***** your city
title("An Ordinary City")

### Call the student's function to build the city
### ***** While developing your program you can call the build_city
### ***** function with one of the "fixed" data sets, but your
### ***** final solution must work with "random_plan()" as the
### ***** argument to the build_city function.  Your program must
### ***** work for any data set that can be returned by the
### ***** random_plan function.
#build_city(fixed_plan_17) # <-- used for code development only, not marking
build_city(random_plan()) # <-- used for assessment

# Exit gracefully
# ***** Change the default argument to False if you want the
# ***** cursor (turtle) to remain visible at the end of the
# ***** program as a debugging aid
release_drawing_canvas()

#
#--------------------------------------------------------------------#

